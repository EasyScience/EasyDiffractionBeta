[build-system]
# Use hatch to build the application.
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
# Information about the EasyDiffractionApp project.
# Note that while the project is called EasyDiffractionApp
# the application itself is EasyDiffraction.
name = 'easyDiffractionApp'
version = '0.9.8'
description = 'Making diffraction data analysis and modelling easy.'
authors = [
  {name = "Andrew Sazonov", email = "andrew.sazonov@ess.eu"}
]
maintainers = [
  {name = "Andrew Sazonov", email = "andrew.sazonov@ess.eu"}
]
license = {file = "LICENSE.md"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Development Status :: 4 - Beta"
]
requires-python = ">=3.8,<3.13"
dependencies = [
    'numpy<2',
    'scipy<1.14',
    'lmfit',
    'orjson',
    'funcy',
    'cryspy',
    'EasyApp @ git+https://github.com/easyscience/EasyApp.git@new-easy-app2'
]

[project.optional-dependencies]
ci = [
  'toml',
  'pyinstaller',
  'requests',
  'licensename',
  'dephell_licenses'
]
test = [
  'pytest>=5.2',
  'pytest-image-diff',
  'pytest-benchmark'
]

[project.urls]
homepage = 'https://easydiffraction.org'

[tool.hatch.metadata]
# This allows for local and git references in dependencies.
allow-direct-references = true

[tool.hatch.build.targets.wheel]
# https://github.com/pypa/hatch/releases/tag/hatchling-v1.19.0
packages = ["EasyDiffractionApp"]

##########################################################
##########################################################
############## CI CONFIGURATION INFORMATION ##############
##########################################################
##########################################################

# The content in this section is related to how the
# application is built on the Github action. Users of
# EasyDiffraction shouldn't worry about this content.

[release]
app_name = 'EasyDiffraction'
family_name = 'EasyScience'
tag_template = 'v{VERSION}'
title_template = 'Version {VERSION} ({DATE})'
description_file = 'RELEASE.md'
changelog_file = 'CHANGELOG.md'
homepage = 'https://easydiffraction.org'

[ci.project]
license_file = 'LICENSE.md' # how to combine this with tool.poetry.license???

[ci.project.subdirs]
scripts = 'tools/Scripts'
docs = { src = 'docs', dest = 'Documentation' }
examples = { src = '{PROJECT_NAME}/Examples', dest = 'Examples' }
tutorials = 'docs/UserManual/VideoTutorials'
download = 'ci/download'
screenshots = 'ci/screenshots'
build = 'ci/build'
distribution = 'ci/distribution'

[ci.scripts]
silent_install = 'SilentInstall.js'
package_install = 'InstallerInstallScript.js'
config_control = 'InstallerControlScript.js'
config_style = 'style.qss'

[ci.codesign]
apple.product_id = 'org.easyscience.easydiffraction'
apple.identity = 'Developer ID Application: European Spallation Source Eric (W2AG9MPZ43)'
apple.team_id = 'W2AG9MPZ43'

[ci.app.icon]
dir = ['Gui', 'Resources', 'Logo']
file_name = 'App'
file_ext = { macos = '.icns', ubuntu = '.png', windows = '.ico' }

[ci.app.setup]
build_dir_suffix = 'Setup'
repository_dir_suffix = 'Repos'
os = { macos = 'macOS', ubuntu = 'Linux', windows = 'Windows' }  # Should be the same as GH actions ${{ runner.os }}
arch = { macos = 'x64', ubuntu = 'x64', windows = 'x64' }
file_ext = { macos = '.app', ubuntu = '', windows = '.exe' }
maintenance_tool_suffix = 'MaintenanceTool'
maintenance_file = 'signedmaintenancetool.exe'
installation_dir_shortcut = { macos = '@ApplicationsDir@', ubuntu = '@HomeDir@', windows = '@ApplicationsDirX86@' }

[ci.app.setup.ftp]
host = 'ftp.easydiffraction.org'
port = 21
user = 'u652432322.ci'
prefix = 'download'
repo_subdir = 'onlineRepository'

[ci.app.setup.build]
# config
config_dir = 'config'
config_xml = 'config.xml'
# packages
packages_dir = 'packages'
data_subsubdir = 'data'
meta_subsubdir = 'meta'
package_xml = 'package.xml'
# package: app
app_package_subdir = 'app'
# package: docs
#docs_package_subdir = 'docs'
#docs_package_subdir = 'docs'
#docs_package_name = 'Documentation'
#docs_package_description = 'Documentation: User manual, text and video tutorials'
#docs_package_version = '2020.7.11'

[ci.app.tutorials.video]
fps = 25                # Frames per Second
crf = 18                # Constant Rate Factor
preset = 'slower'
movflags = 'faststart'
pix_fmt = 'yuv420p'     # Pixel format

[ci.app.translations]
dir = 'Gui/Resources/Translations'
languages = [ { code = 'en', name = 'English' },
              { code = 'da', name = 'Dansk' },
              { code = 'sv', name = 'Svenska' },
              { code = 'pl', name = 'Polski' },
              { code = 'ru', name = 'Русский' } ]

[ci.app.audio]
dir = 'Gui/Resources/Audio'

[ci.pyinstaller]
separator = { macos = ':', ubuntu = ':', windows = ';' }
dir_suffix = { macos = '.app', ubuntu = '', windows = '' }
content_suffix = { macos = 'Contents/MacOS/', ubuntu = '', windows = '' }
libs = { macos = 'libsDarwin', ubuntu = 'libsLinux', windows = 'libsWin32' }
missing_calculator_libs = { macos = [], ubuntu = [], windows = [] }
missing_pyside6_files = { macos = ['libshiboken6.abi3.*.dylib'], ubuntu = [], windows = ['shiboken6.abi3.dll', 'MSVCP140.dll'] }
missing_pyside6_plugins = { macos = [], ubuntu = ['Qt/plugins/xcbglintegrations'], windows = [] } # EGL and GLX plugins
missing_other_libraries = {macos = [], ubuntu = [], windows = ['libs/libiomp5md.dll', 'libs/opengl32.dll', 'libs/VC_redist.x64.exe'] }
auto_exclude = { macos = ['_tkinter'], ubuntu = ['_tkinter'], windows = [''], all = [ 'lib2to3', '_bisect',
                '_codecs_cn', '_codecs_hk', '_codecs_iso2022', '_codecs_jp', '_codecs_kr', '_codecs_tw',
                '_curses', '_elementtree', '_hashlib', '_heapq', '_multibytecodec', '_opcode', '_queue',
                '_opcode', '_uuid', '_win32sysloader', 'grp', 'readline', 'termios' ] }
manual_exclude = [ 'mfc*', 'msvcp*', 'VCRUNTIME*', '*Qt*Bluetooth*', '*Qt*Bodymovin*', '*Qt*Gamepad*', '*Qt*Location*',
                   '*Qt*Nfc*', '*Qt*Purchasing*', '*Qt*QuickParticles*', '*Qt*QuickShapes*', '*Qt*RemoteObjects*',
                   '*Qt*Scxml*', '*Qt*Sensors*', '*Qt*Sql*', '*Qt*VirtualKeyboard*', '*Qt*Wayland*' ]

[ci.qtifw.setup]
version = '4.7.0'
https_mirrors = ['qt.mirror.constant.com', 'ftp.fau.de/qtproject', 'mirrors.dotsrc.org/qtproject']
base_path = 'official_releases/qt-installer-framework'
file_name_base = 'QtInstallerFramework'
file_platform = { macos = 'macOS-x64', ubuntu = 'linux-x64', windows = 'windows-x64' }
file_ext = { macos = 'dmg', ubuntu = 'run', windows = 'exe' }
installation_path = { macOS = '/Users/runner/Qt', Linux = '/home/runner/Qt', Windows = 'C:\Qt' }

[ci.ffmpeg.macos]  # https://evermeet.cx/ffmpeg/ffmpeg-4.3.zip
version = '5.1.2'
base_url = 'https://evermeet.cx/ffmpeg'
file_name_base = 'ffmpeg-'
file_ext = '.zip'
exe = 'ffmpeg'
